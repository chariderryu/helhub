# post_to_x.py 例：鍵の取得ロジックだけ差し替え
import os
import json
from typing import Dict, Optional

# あるなら使う（無ければ問題なしでスルー）
try:
    from dotenv import load_dotenv  # pip install python-dotenv
    load_dotenv()
except Exception:
    pass

def load_config_json(path: str) -> Dict:
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def pick(*values):
    """最初に見つかった非空値を返す"""
    for v in values:
        if v:
            return v
    return None

def load_x_keys(config_path: Optional[str] = None) -> Dict[str, str]:
    """
    優先順位：環境変数 (.env を含む) ＞ config.json ＞ 空
    """
    cfg = load_config_json(config_path) if config_path else {}

    api_key = pick(os.getenv("X_API_KEY"), cfg.get("x_api_key"))
    api_secret = pick(os.getenv("X_API_SECRET"), cfg.get("x_api_secret"))
    access_token = pick(os.getenv("X_ACCESS_TOKEN"), cfg.get("x_access_token"))
    access_secret = pick(os.getenv("X_ACCESS_SECRET"), cfg.get("x_access_secret"))
    bearer_token = pick(os.getenv("X_BEARER_TOKEN"), cfg.get("x_bearer_token"))

    keys = {
        "api_key": api_key,
        "api_secret": api_secret,
        "access_token": access_token,
        "access_secret": access_secret,
        "bearer_token": bearer_token,
    }
    missing = [k for k, v in keys.items() if k != "bearer_token" and not v]  # bearerは任意なら除外
    if missing:
        # ここでは丁寧にエラーに。CI/自動運用時の取り違えを防ぐ
        raise RuntimeError(
            "X API keys missing: " + ", ".join(missing) +
            ". Provide them via environment variables (.env) or config.json."
        )
    return keys

def redact(s: Optional[str]) -> str:
    if not s:
        return "(none)"
    return s[:4] + "..." + s[-4:]

# ===== ここから下は既存ロジック（例：tweepy など）に鍵を渡すだけ =====
def make_client(keys: Dict[str, str]):
    """
    使っているライブラリに応じてクライアントを作成。
    例: tweepy.Client(bearer_token=..., consumer_key=..., consumer_secret=..., access_token=..., access_token_secret=...)
    """
    # ここは既存に合わせてください
    # return tweepy.Client( ... )
    return keys  # ダミー（実装は既存クライアント作成に差し替え）

def main():
    # 例：引数で config を受け付けたい場合
    import argparse
    ap = argparse.ArgumentParser()
    ap.add_argument("--config", default="config.json")
    ap.add_argument("--text", required=True, help="投稿本文")
    args = ap.parse_args()

    keys = load_x_keys(args.config)

    # ログには**絶対に生の鍵を出さない**
    print(
        "[post_to_x] keys loaded: "
        f"api_key={redact(keys['api_key'])}, "
        f"api_secret={redact(keys['api_secret'])}, "
        f"access_token={redact(keys['access_token'])}, "
        f"access_secret={redact(keys['access_secret'])}, "
        f"bearer={redact(keys.get('bearer_token'))}"
    )

    client = make_client(keys)
    # ここで既存の投稿処理を行う：例）
    # client.create_tweet(text=args.text)
    print(f"[post_to_x] would post: {args.text}")

if __name__ == "__main__":
    main()
